{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst timer = document.querySelector('.timer');\nconst input = document.querySelector('#datetime-picker');\nconst btn = document.querySelector('button[data-start]');\nconst timerFields = document.querySelectorAll('.value');\n\nlet selectedDate = null;\nlet timerId = null;\n\nbtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const currentDate = new Date();\n    selectedDate = selectedDates[0];\n    if (selectedDate > currentDate) {\n      btn.disabled = false;\n    } else {\n      btn.disabled = true;\n      iziToast.warning({\n        title: 'Увага',\n        message: 'Будь ласка, оберіть дату в майбутньому',\n        position: 'topRight',\n      });\n    }\n  },\n};\nflatpickr(input, options);\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n\n  const hours = Math.floor((ms % day) / hour);\n\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nbtn.addEventListener('click', () => {\n  btn.disabled = true;\n  input.disabled = true;\n  timerId = setInterval(() => {\n    const currentDate = new Date();\n    const diff = selectedDate - currentDate;\n    if (diff <= 0) {\n      clearInterval(timerId);\n      updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      return;\n    }\n    const timeLeft = convertMs(diff);\n    updateTimerDisplay(timeLeft);\n  }, 1000);\n});\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  timerFields[0].textContent = addLeadingZero(days);\n  timerFields[1].textContent = addLeadingZero(hours);\n  timerFields[2].textContent = addLeadingZero(minutes);\n  timerFields[3].textContent = addLeadingZero(seconds);\n}\n"],"names":["input","btn","timerFields","selectedDate","timerId","options","selectedDates","currentDate","iziToast","flatpickr","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","diff","updateTimerDisplay","timeLeft"],"mappings":"+IAKc,SAAS,cAAc,QAAQ,EAC7C,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAM,SAAS,cAAc,oBAAoB,EACjDC,EAAc,SAAS,iBAAiB,QAAQ,EAEtD,IAAIC,EAAe,KACfC,EAAU,KAEdH,EAAI,SAAW,GAEf,MAAMI,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAc,IAAI,KACxBJ,EAAeG,EAAc,CAAC,EAC1BH,EAAeI,EACjBN,EAAI,SAAW,IAEfA,EAAI,SAAW,GACfO,EAAS,QAAQ,CACf,MAAO,QACP,QAAS,yCACT,SAAU,UAClB,CAAO,EAEJ,CACH,EACAC,EAAUT,EAAOK,CAAO,EAExB,SAASK,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAhB,EAAI,iBAAiB,QAAS,IAAM,CAClCA,EAAI,SAAW,GACfD,EAAM,SAAW,GACjBI,EAAU,YAAY,IAAM,CAE1B,MAAMc,EAAOf,EADO,IAAI,KAExB,GAAIe,GAAQ,EAAG,CACb,cAAcd,CAAO,EACrBe,EAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAChE,MACD,CACD,MAAMC,EAAWR,EAAUM,CAAI,EAC/BC,EAAmBC,CAAQ,CAC5B,EAAE,GAAI,CACT,CAAC,EAED,SAASD,EAAmB,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC7Df,EAAY,CAAC,EAAE,YAAcQ,EAAeI,CAAI,EAChDZ,EAAY,CAAC,EAAE,YAAcQ,EAAeK,CAAK,EACjDb,EAAY,CAAC,EAAE,YAAcQ,EAAeM,CAAO,EACnDd,EAAY,CAAC,EAAE,YAAcQ,EAAeO,CAAO,CACrD"}